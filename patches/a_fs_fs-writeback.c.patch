diff --git a/fs/fs-writeback.c b/fs/fs-writeback.c
index 05713a5..6cfd433 100644
--- a/fs/fs-writeback.c
+++ b/fs/fs-writeback.c
@@ -880,9 +880,9 @@ fs_initcall(cgroup_writeback_init);
 #else	/* CONFIG_CGROUP_WRITEBACK */
 
 static struct bdi_writeback *
+locked_inode_to_wb_and_lock_list(struct inode *inode) __releases(&inode->i_lock) __acquires(&wb->list_lock);
+static struct bdi_writeback *
 locked_inode_to_wb_and_lock_list(struct inode *inode)
-	__releases(&inode->i_lock)
-	__acquires(&wb->list_lock)
 {
 	struct bdi_writeback *wb = inode_to_wb(inode);
 
@@ -891,8 +891,8 @@ locked_inode_to_wb_and_lock_list(struct inode *inode)
 	return wb;
 }
 
+static struct bdi_writeback *inode_to_wb_and_lock_list(struct inode *inode) __acquires(&wb->list_lock);
 static struct bdi_writeback *inode_to_wb_and_lock_list(struct inode *inode)
-	__acquires(&wb->list_lock)
 {
 	struct bdi_writeback *wb = inode_to_wb(inode);
 
@@ -1173,9 +1173,8 @@ static int write_inode(struct inode *inode, struct writeback_control *wbc)
  * Wait for writeback on an inode to complete. Called with i_lock held.
  * Caller must make sure inode cannot go away when we drop i_lock.
  */
+static void __inode_wait_for_writeback(struct inode *inode) __must_hold(&inode->i_lock);
 static void __inode_wait_for_writeback(struct inode *inode)
-	__releases(inode->i_lock)
-	__acquires(inode->i_lock)
 {
 	DEFINE_WAIT_BIT(wq, &inode->i_state, __I_SYNC);
 	wait_queue_head_t *wqh;
@@ -1204,8 +1203,8 @@ void inode_wait_for_writeback(struct inode *inode)
  * held and drops it. It is aimed for callers not holding any inode reference
  * so once i_lock is dropped, inode can go away.
  */
+static void inode_sleep_on_writeback(struct inode *inode) __releases(&inode->i_lock);
 static void inode_sleep_on_writeback(struct inode *inode)
-	__releases(inode->i_lock)
 {
 	DEFINE_WAIT(wait);
 	wait_queue_head_t *wqh = bit_waitqueue(&inode->i_state, __I_SYNC);
