diff --git a/arch/x86/kernel/acpi/wakeup_32.S b/arch/x86/kernel/acpi/wakeup_32.S
index 0c26b1b..dfa105a 100644
--- a/arch/x86/kernel/acpi/wakeup_32.S
+++ b/arch/x86/kernel/acpi/wakeup_32.S
@@ -2,6 +2,7 @@
 #include <linux/linkage.h>
 #include <asm/segment.h>
 #include <asm/page_types.h>
+#include <asm/smap.h>
 
 # Copyright 2003, 2008 Pavel Machek <pavel@suse.cz>, distribute under GPLv2
 
@@ -14,8 +15,6 @@ wakeup_pmode_return:
 	movw	%ax, %ss
 	movw	%ax, %fs
 	movw	%ax, %gs
-
-	movw	$__USER_DS, %ax
 	movw	%ax, %ds
 	movw	%ax, %es
 
@@ -31,13 +30,11 @@ wakeup_pmode_return:
 	# and restore the stack ... but you need gdt for this to work
 	movl	saved_context_esp, %esp
 
-	movl	%cs:saved_magic, %eax
-	cmpl	$0x12345678, %eax
+	cmpl	$0x12345678, saved_magic
 	jne	bogus_magic
 
 	# jump to place where we left off
-	movl	saved_eip, %eax
-	jmp	*%eax
+	jmp	*(saved_eip)
 
 bogus_magic:
 	jmp	bogus_magic
@@ -59,7 +56,7 @@ save_registers:
 	popl	saved_context_eflags
 
 	movl	$ret_point, saved_eip
-	ret
+	pax_ret save_registers
 
 
 restore_registers:
@@ -69,13 +66,14 @@ restore_registers:
 	movl	saved_context_edi, %edi
 	pushl	saved_context_eflags
 	popfl
-	ret
+	ASM_CLAC
+	pax_ret restore_registers
 
 ENTRY(do_suspend_lowlevel)
-	call	save_processor_state
-	call	save_registers
+	pax_direct_call save_processor_state
+	pax_direct_call save_registers
 	pushl	$3
-	call	x86_acpi_enter_sleep_state
+	pax_direct_call x86_acpi_enter_sleep_state
 	addl	$4, %esp
 
 #	In case of S3 failure, we'll emerge here.  Jump
@@ -83,9 +81,9 @@ ENTRY(do_suspend_lowlevel)
 	jmp	ret_point
 	.p2align 4,,7
 ret_point:
-	call	restore_registers
-	call	restore_processor_state
-	ret
+	pax_direct_call restore_registers
+	pax_direct_call restore_processor_state
+	pax_ret do_suspend_lowlevel
 
 .data
 ALIGN
