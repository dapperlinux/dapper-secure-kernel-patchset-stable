diff --git a/include/linux/linkage.h b/include/linux/linkage.h
index a6a42dd..4313dcc 100644
--- a/include/linux/linkage.h
+++ b/include/linux/linkage.h
@@ -5,6 +5,7 @@
 #include <linux/stringify.h>
 #include <linux/export.h>
 #include <asm/linkage.h>
+#include <asm/bitsperlong.h>
 
 /* Some toolchains use other characters (e.g. '`') to mark new line in macro */
 #ifndef ASM_NL
@@ -22,7 +23,16 @@
 #endif
 
 #ifndef cond_syscall
+# ifdef CONFIG_PAX_RAP
+#  define rap_cond_syscall(x)				\
+	".weak " VMLINUX_SYMBOL_STR(rap_##x) "\n\t"	\
+	".set  " VMLINUX_SYMBOL_STR(rap_##x) ","	\
+		 VMLINUX_SYMBOL_STR(rap_sys_ni_syscall) "\n\t"
+# else
+#  define rap_cond_syscall(x)
+# endif
 #define cond_syscall(x)	asm(				\
+	rap_cond_syscall(x)				\
 	".weak " VMLINUX_SYMBOL_STR(x) "\n\t"		\
 	".set  " VMLINUX_SYMBOL_STR(x) ","		\
 		 VMLINUX_SYMBOL_STR(sys_ni_syscall))
@@ -36,6 +46,7 @@
 #endif
 
 #define __page_aligned_data	__section(.data..page_aligned) __aligned(PAGE_SIZE)
+#define __page_aligned_rodata	__read_only __aligned(PAGE_SIZE)
 #define __page_aligned_bss	__section(.bss..page_aligned) __aligned(PAGE_SIZE)
 
 /*
@@ -72,6 +83,18 @@
 #define __ALIGN_STR	".align 4,0x90"
 #endif
 
+#ifdef CONFIG_PAX_RAP
+# if BITS_PER_LONG == 64
+#  define __ASM_RAP_HASH(hash) .quad 0, hash
+#  define __ASM_RAP_RET_HASH(hash) .quad hash
+# elif BITS_PER_LONG == 32
+#  define __ASM_RAP_HASH(hash) .long 0, hash
+#  define __ASM_RAP_RET_HASH(hash) .long hash
+# else
+#  error incompatible BITS_PER_LONG
+# endif
+#endif
+
 #ifdef __ASSEMBLY__
 
 #ifndef LINKER_SCRIPT
@@ -79,17 +102,33 @@
 #define ALIGN_STR __ALIGN_STR
 
 #ifndef ENTRY
-#define ENTRY(name) \
+#define __ENTRY(name, rap_hash) \
 	.globl name ASM_NL \
 	ALIGN ASM_NL \
+	rap_hash \
 	name:
+
+#define ENTRY(name) __ENTRY(name,)
+
 #endif
+
 #endif /* LINKER_SCRIPT */
 
 #ifndef WEAK
-#define WEAK(name)	   \
-	.weak name ASM_NL   \
+#define __WEAK(name, rap_hash) \
+	.weak name ASM_NL \
+	rap_hash \
 	name:
+
+#define WEAK(name) __WEAK(name, )
+#endif
+
+#ifdef CONFIG_PAX_RAP
+# define RAP_ENTRY(name) __ENTRY(name, __ASM_RAP_HASH(__rap_hash_call_##name) ASM_NL)
+# define RAP_WEAK(name) __WEAK(name, __ASM_RAP_HASH(__rap_hash_call_##name) ASM_NL)
+#else
+# define RAP_ENTRY(name) ENTRY(name)
+# define RAP_WEAK(name) WEAK(name)
 #endif
 
 #ifndef END
