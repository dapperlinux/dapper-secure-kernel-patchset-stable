diff --git a/include/linux/thread_info.h b/include/linux/thread_info.h
index 2873baf..19e866c 100644
--- a/include/linux/thread_info.h
+++ b/include/linux/thread_info.h
@@ -14,7 +14,9 @@ struct timespec;
 struct compat_timespec;
 
 #ifdef CONFIG_THREAD_INFO_IN_TASK
-#define current_thread_info() ((struct thread_info *)current)
+#ifndef current_thread_info
+struct thread_info *current_thread_info(void);
+#endif
 #endif
 
 /*
@@ -54,6 +56,13 @@ struct restart_block {
 
 extern long do_no_restart_syscall(struct restart_block *parm);
 
+enum {
+	BAD_STACK = -1,
+	NOT_STACK = 0,
+	GOOD_STACK,
+	GOOD_FRAME,
+};
+
 #include <linux/bitops.h>
 #include <asm/thread_info.h>
 
@@ -71,6 +80,22 @@ extern long do_no_restart_syscall(struct restart_block *parm);
  * - pass TIF_xxxx constants to these functions
  */
 
+#ifdef CONFIG_THREAD_INFO_IN_TASK
+#define set_ti_thread_flag(ti, flag) \
+	set_bit(flag, (unsigned long *)&ti->flags)
+
+#define clear_ti_thread_flag(ti, flag) \
+	clear_bit(flag, (unsigned long *)&ti->flags)
+
+#define test_and_set_ti_thread_flag(ti, flag) \
+	test_and_set_bit(flag, (unsigned long *)&ti->flags)
+
+#define test_and_clear_ti_thread_flag(ti, flag) \
+	test_and_clear_bit(flag, (unsigned long *)&ti->flags)
+
+#define test_ti_thread_flag(ti, flag) \
+	test_bit(flag, (unsigned long *)&ti->flags)
+#else
 static inline void set_ti_thread_flag(struct thread_info *ti, int flag)
 {
 	set_bit(flag, (unsigned long *)&ti->flags);
@@ -95,6 +120,7 @@ static inline int test_ti_thread_flag(struct thread_info *ti, int flag)
 {
 	return test_bit(flag, (unsigned long *)&ti->flags);
 }
+#endif
 
 #define set_thread_flag(flag) \
 	set_ti_thread_flag(current_thread_info(), flag)
@@ -110,11 +136,11 @@ static inline int test_ti_thread_flag(struct thread_info *ti, int flag)
 #define tif_need_resched() test_thread_flag(TIF_NEED_RESCHED)
 
 #ifndef CONFIG_HAVE_ARCH_WITHIN_STACK_FRAMES
-static inline int arch_within_stack_frames(const void * const stack,
-					   const void * const stackend,
-					   const void *obj, unsigned long len)
+static inline int arch_within_stack_frames(unsigned long stack,
+					   unsigned long stackend,
+					   unsigned long obj, unsigned long len)
 {
-	return 0;
+	return GOOD_STACK;
 }
 #endif
 
@@ -134,6 +160,8 @@ static inline void check_object_size(const void *ptr, unsigned long n,
 { }
 #endif /* CONFIG_HARDENED_USERCOPY */
 
+bool __access_ok(int type, unsigned long addr, size_t size);
+
 #endif	/* __KERNEL__ */
 
 #endif /* _LINUX_THREAD_INFO_H */
