diff --git a/drivers/irqchip/irq-jcore-aic.c b/drivers/irqchip/irq-jcore-aic.c
index 033bccb..7c93666 100644
--- a/drivers/irqchip/irq-jcore-aic.c
+++ b/drivers/irqchip/irq-jcore-aic.c
@@ -23,7 +23,23 @@
 
 #define JCORE_AIC1_INTPRI_REG	8
 
-static struct irq_chip jcore_aic;
+static void noop(struct irq_data *data)
+{
+}
+
+static struct irq_chip jcore_aic = {
+	/*
+	 * The irq chip framework requires either mask/unmask or enable/disable
+	 * function pointers to be provided, but the hardware does not have any
+	 * such mechanism; the only interrupt masking is at the cpu level and
+	 * it affects all interrupts. We provide dummy mask/unmask. The hardware
+	 * handles all interrupt control and clears pending status when the cpu
+	 * accepts the interrupt.
+	 */
+	.irq_mask = noop,
+	.irq_unmask = noop,
+	.name = "AIC",
+};
 
 /*
  * The J-Core AIC1 and AIC2 are cpu-local interrupt controllers and do
@@ -58,10 +74,6 @@ static const struct irq_domain_ops jcore_aic_irqdomain_ops = {
 	.xlate = irq_domain_xlate_onecell,
 };
 
-static void noop(struct irq_data *data)
-{
-}
-
 static int __init aic_irq_of_init(struct device_node *node,
 				  struct device_node *parent)
 {
@@ -88,18 +100,6 @@ static int __init aic_irq_of_init(struct device_node *node,
 		min_irq = JCORE_AIC1_MIN_HWIRQ;
 	}
 
-	/*
-	 * The irq chip framework requires either mask/unmask or enable/disable
-	 * function pointers to be provided, but the hardware does not have any
-	 * such mechanism; the only interrupt masking is at the cpu level and
-	 * it affects all interrupts. We provide dummy mask/unmask. The hardware
-	 * handles all interrupt control and clears pending status when the cpu
-	 * accepts the interrupt.
-	 */
-	jcore_aic.irq_mask = noop;
-	jcore_aic.irq_unmask = noop;
-	jcore_aic.name = "AIC";
-
 	domain = irq_domain_add_linear(node, dom_sz, &jcore_aic_irqdomain_ops,
 				       &jcore_aic);
 	if (!domain)
