diff --git a/mm/usercopy.c b/mm/usercopy.c
index 3c8da0a..3dfb587 100644
--- a/mm/usercopy.c
+++ b/mm/usercopy.c
@@ -16,14 +16,9 @@
 
 #include <linux/mm.h>
 #include <linux/slab.h>
+#include <linux/ratelimit.h>
 #include <asm/sections.h>
-
-enum {
-	BAD_STACK = -1,
-	NOT_STACK = 0,
-	GOOD_FRAME,
-	GOOD_STACK,
-};
+#include <asm/uaccess.h>
 
 /*
  * Checks if a given pointer and length is contained by the current
@@ -35,11 +30,13 @@ enum {
  *	GOOD_STACK: fully on the stack (when can't do frame-checking)
  *	BAD_STACK: error condition (invalid stack position or bad stack frame)
  */
-static noinline int check_stack_object(const void *obj, unsigned long len)
+static noinline int check_stack_object(unsigned long obj, unsigned long len)
 {
-	const void * const stack = task_stack_page(current);
-	const void * const stackend = stack + THREAD_SIZE;
-	int ret;
+	unsigned long stack = (unsigned long)task_stack_page(current);
+	unsigned long stackend = (unsigned long)stack + THREAD_SIZE;
+
+	if (obj + len < obj)
+		return BAD_STACK;
 
 	/* Object is not on the stack at all. */
 	if (obj + len <= stack || stackend <= obj)
@@ -54,25 +51,29 @@ static noinline int check_stack_object(const void *obj, unsigned long len)
 		return BAD_STACK;
 
 	/* Check if object is safely within a valid frame. */
-	ret = arch_within_stack_frames(stack, stackend, obj, len);
-	if (ret)
-		return ret;
-
-	return GOOD_STACK;
+	return arch_within_stack_frames(stack, stackend, obj, len);
 }
 
-static void report_usercopy(const void *ptr, unsigned long len,
-			    bool to_user, const char *type)
+static DEFINE_RATELIMIT_STATE(usercopy_ratelimit, 15 * HZ, 3);
+
+static __noreturn void report_usercopy(const void *ptr, unsigned long len,
+				       bool to_user, const char *type)
 {
-	pr_emerg("kernel memory %s attempt detected %s %p (%s) (%lu bytes)\n",
-		to_user ? "exposure" : "overwrite",
-		to_user ? "from" : "to", ptr, type ? : "unknown", len);
+	if (__ratelimit(&usercopy_ratelimit)) {
+		pr_emerg("kernel memory %s attempt detected %s %p (%s) (%lu bytes)\n",
+			to_user ? "exposure" : "overwrite",
+			to_user ? "from" : "to", ptr, type ? : "unknown", len);
+		dump_stack();
+	}
+	do_group_exit(SIGKILL);
+#ifdef CONFIG_BROKEN_SECURITY
 	/*
 	 * For greater effect, it would be nice to do do_group_exit(),
 	 * but BUG() actually hooks all the lock-breaking and per-arch
 	 * Oops code, so that is used here instead.
 	 */
 	BUG();
+#endif
 }
 
 /* Returns true if any portion of [ptr,ptr+n) over laps with [low,high). */
@@ -93,8 +94,17 @@ static bool overlaps(const void *ptr, unsigned long n, unsigned long low,
 static inline const char *check_kernel_text_object(const void *ptr,
 						   unsigned long n)
 {
+#if defined(CONFIG_X86_32) && defined(CONFIG_PAX_KERNEXEC)
+	unsigned long textlow = ktla_ktva((unsigned long)_stext);
+#ifdef CONFIG_MODULES
+	unsigned long texthigh = (unsigned long)MODULES_EXEC_VADDR;
+#else
+	unsigned long texthigh = ktla_ktva((unsigned long)_etext);
+#endif
+#else
 	unsigned long textlow = (unsigned long)_stext;
 	unsigned long texthigh = (unsigned long)_etext;
+#endif
 	unsigned long textlow_linear, texthigh_linear;
 
 	if (overlaps(ptr, n, textlow, texthigh))
@@ -252,10 +262,15 @@ void __check_object_size(const void *ptr, unsigned long n, bool to_user)
 		goto report;
 
 	/* Check for bad stack object. */
-	switch (check_stack_object(ptr, n)) {
+	switch (check_stack_object((unsigned long)ptr, n)) {
 	case NOT_STACK:
 		/* Object is not touching the current process stack. */
-		break;
+		/* Check for object in kernel to avoid text exposure. */
+		err = check_kernel_text_object(ptr, n);
+		if (err)
+			break;
+		return;
+
 	case GOOD_FRAME:
 	case GOOD_STACK:
 		/*
@@ -264,16 +279,12 @@ void __check_object_size(const void *ptr, unsigned long n, bool to_user)
 		 * process stack (when frame checking not available).
 		 */
 		return;
-	default:
+
+	case BAD_STACK:
 		err = "<process stack>";
-		goto report;
+		break;
 	}
 
-	/* Check for object in kernel to avoid text exposure. */
-	err = check_kernel_text_object(ptr, n);
-	if (!err)
-		return;
-
 report:
 	report_usercopy(ptr, n, to_user, err);
 }
