diff --git a/fs/nfsd/nfs4callback.c b/fs/nfsd/nfs4callback.c
index 211dc2a..c8607c1 100644
--- a/fs/nfsd/nfs4callback.c
+++ b/fs/nfsd/nfs4callback.c
@@ -470,8 +470,7 @@ static int decode_cb_sequence4res(struct xdr_stream *xdr,
 /*
  * NB: Without this zero space reservation, callbacks over krb5p fail
  */
-static void nfs4_xdr_enc_cb_null(struct rpc_rqst *req, struct xdr_stream *xdr,
-				 void *__unused)
+static void nfs4_xdr_enc_cb_null(void *req, struct xdr_stream *xdr, void *__unused)
 {
 	xdr_reserve_space(xdr, 0);
 }
@@ -479,9 +478,9 @@ static void nfs4_xdr_enc_cb_null(struct rpc_rqst *req, struct xdr_stream *xdr,
 /*
  * 20.2. Operation 4: CB_RECALL - Recall a Delegation
  */
-static void nfs4_xdr_enc_cb_recall(struct rpc_rqst *req, struct xdr_stream *xdr,
-				   const struct nfsd4_callback *cb)
+static void nfs4_xdr_enc_cb_recall(void *req, struct xdr_stream *xdr, void *_cb)
 {
+	const struct nfsd4_callback *cb = _cb;
 	const struct nfs4_delegation *dp = cb_to_delegation(cb);
 	struct nfs4_cb_compound_hdr hdr = {
 		.ident = cb->cb_clp->cl_cb_ident,
@@ -504,8 +503,7 @@ static void nfs4_xdr_enc_cb_recall(struct rpc_rqst *req, struct xdr_stream *xdr,
  * Protocol".
  */
 
-static int nfs4_xdr_dec_cb_null(struct rpc_rqst *req, struct xdr_stream *xdr,
-				void *__unused)
+static int nfs4_xdr_dec_cb_null(void *req, struct xdr_stream *xdr, void *__unused)
 {
 	return 0;
 }
@@ -513,10 +511,11 @@ static int nfs4_xdr_dec_cb_null(struct rpc_rqst *req, struct xdr_stream *xdr,
 /*
  * 20.2. Operation 4: CB_RECALL - Recall a Delegation
  */
-static int nfs4_xdr_dec_cb_recall(struct rpc_rqst *rqstp,
+static int nfs4_xdr_dec_cb_recall(void *rqstp,
 				  struct xdr_stream *xdr,
-				  struct nfsd4_callback *cb)
+				  void *_cb)
 {
+	struct nfsd4_callback *cb = _cb;
 	struct nfs4_cb_compound_hdr hdr;
 	int status;
 
@@ -586,10 +585,12 @@ static void encode_cb_layout4args(struct xdr_stream *xdr,
 	hdr->nops++;
 }
 
-static void nfs4_xdr_enc_cb_layout(struct rpc_rqst *req,
+static void nfs4_xdr_enc_cb_layout(void *_req,
 				   struct xdr_stream *xdr,
-				   const struct nfsd4_callback *cb)
+				   void *_cb)
 {
+	struct rpc_rqst *req = _req;
+	const struct nfsd4_callback *cb = _cb;
 	const struct nfs4_layout_stateid *ls =
 		container_of(cb, struct nfs4_layout_stateid, ls_recall);
 	struct nfs4_cb_compound_hdr hdr = {
@@ -603,10 +604,12 @@ static void nfs4_xdr_enc_cb_layout(struct rpc_rqst *req,
 	encode_cb_nops(&hdr);
 }
 
-static int nfs4_xdr_dec_cb_layout(struct rpc_rqst *rqstp,
+static int nfs4_xdr_dec_cb_layout(void *_rqstp,
 				  struct xdr_stream *xdr,
-				  struct nfsd4_callback *cb)
+				  void *_cb)
 {
+	struct rpc_rqst *rqstp = _rqstp;
+	struct nfsd4_callback *cb = _cb;
 	struct nfs4_cb_compound_hdr hdr;
 	int status;
 
@@ -632,10 +635,12 @@ static void encode_stateowner(struct xdr_stream *xdr, struct nfs4_stateowner *so
 	xdr_encode_opaque(p, so->so_owner.data, so->so_owner.len);
 }
 
-static void nfs4_xdr_enc_cb_notify_lock(struct rpc_rqst *req,
+static void nfs4_xdr_enc_cb_notify_lock(void *_req,
 					struct xdr_stream *xdr,
-					const struct nfsd4_callback *cb)
+					void *_cb)
 {
+	struct rpc_rqst *req = _req;
+	const struct nfsd4_callback *cb = _cb;
 	const struct nfsd4_blocked_lock *nbl =
 		container_of(cb, struct nfsd4_blocked_lock, nbl_cb);
 	struct nfs4_lockowner *lo = (struct nfs4_lockowner *)nbl->nbl_lock.fl_owner;
@@ -660,10 +665,12 @@ static void nfs4_xdr_enc_cb_notify_lock(struct rpc_rqst *req,
 	encode_cb_nops(&hdr);
 }
 
-static int nfs4_xdr_dec_cb_notify_lock(struct rpc_rqst *rqstp,
+static int nfs4_xdr_dec_cb_notify_lock(void *_rqstp,
 					struct xdr_stream *xdr,
-					struct nfsd4_callback *cb)
+					void *_cb)
 {
+	struct rpc_rqst *rqstp = _rqstp;
+	struct nfsd4_callback *cb = _cb;
 	struct nfs4_cb_compound_hdr hdr;
 	int status;
 
@@ -685,8 +692,8 @@ static int nfs4_xdr_dec_cb_notify_lock(struct rpc_rqst *rqstp,
 #define PROC(proc, call, argtype, restype)				\
 [NFSPROC4_CLNT_##proc] = {						\
 	.p_proc    = NFSPROC4_CB_##call,				\
-	.p_encode  = (kxdreproc_t)nfs4_xdr_enc_##argtype,		\
-	.p_decode  = (kxdrdproc_t)nfs4_xdr_dec_##restype,		\
+	.p_encode  = nfs4_xdr_enc_##argtype,				\
+	.p_decode  = nfs4_xdr_dec_##restype,				\
 	.p_arglen  = NFS4_enc_##argtype##_sz,				\
 	.p_replen  = NFS4_dec_##restype##_sz,				\
 	.p_statidx = NFSPROC4_CB_##call,				\
