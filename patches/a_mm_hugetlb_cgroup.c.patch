diff --git a/mm/hugetlb_cgroup.c b/mm/hugetlb_cgroup.c
index eec1150..af03e3e 100644
--- a/mm/hugetlb_cgroup.c
+++ b/mm/hugetlb_cgroup.c
@@ -27,7 +27,6 @@ struct hugetlb_cgroup {
 	struct page_counter hugepage[HUGE_MAX_HSTATE];
 };
 
-#define MEMFILE_PRIVATE(x, val)	(((x) << 16) | (val))
 #define MEMFILE_IDX(val)	(((val) >> 16) & 0xffff)
 #define MEMFILE_ATTR(val)	((val) & 0xffff)
 
@@ -254,14 +253,7 @@ void hugetlb_cgroup_uncharge_cgroup(int idx, unsigned long nr_pages,
 	return;
 }
 
-enum {
-	RES_USAGE,
-	RES_LIMIT,
-	RES_MAX_USAGE,
-	RES_FAILCNT,
-};
-
-static u64 hugetlb_cgroup_read_u64(struct cgroup_subsys_state *css,
+u64 hugetlb_cgroup_read_u64(struct cgroup_subsys_state *css,
 				   struct cftype *cft)
 {
 	struct page_counter *counter;
@@ -285,7 +277,7 @@ static u64 hugetlb_cgroup_read_u64(struct cgroup_subsys_state *css,
 
 static DEFINE_MUTEX(hugetlb_limit_mutex);
 
-static ssize_t hugetlb_cgroup_write(struct kernfs_open_file *of,
+ssize_t hugetlb_cgroup_write(struct kernfs_open_file *of,
 				    char *buf, size_t nbytes, loff_t off)
 {
 	int ret, idx;
@@ -316,7 +308,7 @@ static ssize_t hugetlb_cgroup_write(struct kernfs_open_file *of,
 	return ret ?: nbytes;
 }
 
-static ssize_t hugetlb_cgroup_reset(struct kernfs_open_file *of,
+ssize_t hugetlb_cgroup_reset(struct kernfs_open_file *of,
 				    char *buf, size_t nbytes, loff_t off)
 {
 	int ret = 0;
@@ -352,46 +344,26 @@ static char *mem_fmt(char *buf, int size, unsigned long hsize)
 
 static void __init __hugetlb_cgroup_file_init(int idx)
 {
+	char names[4][MAX_CFTYPE_NAME];
 	char buf[32];
-	struct cftype *cft;
 	struct hstate *h = &hstates[idx];
 
 	/* format the size */
 	mem_fmt(buf, 32, huge_page_size(h));
-
-	/* Add the limit file */
-	cft = &h->cgroup_files[0];
-	snprintf(cft->name, MAX_CFTYPE_NAME, "%s.limit_in_bytes", buf);
-	cft->private = MEMFILE_PRIVATE(idx, RES_LIMIT);
-	cft->read_u64 = hugetlb_cgroup_read_u64;
-	cft->write = hugetlb_cgroup_write;
-
-	/* Add the usage file */
-	cft = &h->cgroup_files[1];
-	snprintf(cft->name, MAX_CFTYPE_NAME, "%s.usage_in_bytes", buf);
-	cft->private = MEMFILE_PRIVATE(idx, RES_USAGE);
-	cft->read_u64 = hugetlb_cgroup_read_u64;
-
-	/* Add the MAX usage file */
-	cft = &h->cgroup_files[2];
-	snprintf(cft->name, MAX_CFTYPE_NAME, "%s.max_usage_in_bytes", buf);
-	cft->private = MEMFILE_PRIVATE(idx, RES_MAX_USAGE);
-	cft->write = hugetlb_cgroup_reset;
-	cft->read_u64 = hugetlb_cgroup_read_u64;
-
-	/* Add the failcntfile */
-	cft = &h->cgroup_files[3];
-	snprintf(cft->name, MAX_CFTYPE_NAME, "%s.failcnt", buf);
-	cft->private  = MEMFILE_PRIVATE(idx, RES_FAILCNT);
-	cft->write = hugetlb_cgroup_reset;
-	cft->read_u64 = hugetlb_cgroup_read_u64;
-
-	/* NULL terminate the last cft */
-	cft = &h->cgroup_files[4];
-	memset(cft, 0, sizeof(*cft));
+	snprintf(names[0], MAX_CFTYPE_NAME, "%s.limit_in_bytes", buf);
+	snprintf(names[1], MAX_CFTYPE_NAME, "%s.usage_in_bytes", buf);
+	snprintf(names[2], MAX_CFTYPE_NAME, "%s.max_usage_in_bytes", buf);
+	snprintf(names[3], MAX_CFTYPE_NAME, "%s.failcnt", buf);
+
+	pax_open_kernel();
+	strncpy((void *)(*h->cgroup_files)[0].name, names[0], MAX_CFTYPE_NAME);
+	strncpy((void *)(*h->cgroup_files)[1].name, names[1], MAX_CFTYPE_NAME);
+	strncpy((void *)(*h->cgroup_files)[2].name, names[2], MAX_CFTYPE_NAME);
+	strncpy((void *)(*h->cgroup_files)[3].name, names[3], MAX_CFTYPE_NAME);
+	pax_close_kernel();
 
 	WARN_ON(cgroup_add_legacy_cftypes(&hugetlb_cgrp_subsys,
-					  h->cgroup_files));
+					  *h->cgroup_files));
 }
 
 void __init hugetlb_cgroup_file_init(void)
