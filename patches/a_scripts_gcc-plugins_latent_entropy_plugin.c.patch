diff --git a/scripts/gcc-plugins/latent_entropy_plugin.c b/scripts/gcc-plugins/latent_entropy_plugin.c
index dff390f..1de194b 100644
--- a/scripts/gcc-plugins/latent_entropy_plugin.c
+++ b/scripts/gcc-plugins/latent_entropy_plugin.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2016 by the PaX Team <pageexec@freemail.hu>
+ * Copyright 2012-2017 by the PaX Team <pageexec@freemail.hu>
  * Copyright 2016 by Emese Revfy <re.emese@gmail.com>
  * Licensed under the GPL v2
  *
@@ -14,10 +14,7 @@
  * before:
  * void __latent_entropy test(int argc, char *argv[])
  * {
- *	if (argc <= 1)
- *		printf("%s: no command arguments :(\n", *argv);
- *	else
- *		printf("%s: %d command arguments!\n", *argv, args - 1);
+ *	printf("%u %s\n", argc, *argv);
  * }
  *
  * after:
@@ -26,35 +23,37 @@
  *	// latent_entropy_execute() 1.
  *	unsigned long local_entropy;
  *	// init_local_entropy() 1.
- *	void *local_entropy_frameaddr;
+ *	void *local_entropy_frame_addr;
  *	// init_local_entropy() 3.
- *	unsigned long tmp_latent_entropy;
+ *	unsigned long temp_latent_entropy;
  *
  *	// init_local_entropy() 2.
- *	local_entropy_frameaddr = __builtin_frame_address(0);
- *	local_entropy = (unsigned long) local_entropy_frameaddr;
+ *	local_entropy_frame_addr = __builtin_frame_address(0);
+ *	local_entropy = (unsigned long) local_entropy_frame_addr;
  *
  *	// init_local_entropy() 4.
- *	tmp_latent_entropy = latent_entropy;
+ *	temp_latent_entropy = latent_entropy;
  *	// init_local_entropy() 5.
- *	local_entropy ^= tmp_latent_entropy;
+ *	local_entropy ^= temp_latent_entropy;
  *
  *	// latent_entropy_execute() 3.
- *	if (argc <= 1) {
- *		// perturb_local_entropy()
- *		local_entropy += 4623067384293424948;
- *		printf("%s: no command arguments :(\n", *argv);
- *		// perturb_local_entropy()
- *	} else {
- *		local_entropy ^= 3896280633962944730;
- *		printf("%s: %d command arguments!\n", *argv, args - 1);
- *	}
+ *	local_entropy += 4623067384293424948;
+ *
+ *	printf("%u %s\n", argc, *argv);
  *
  *	// latent_entropy_execute() 4.
- *	tmp_latent_entropy = rol(tmp_latent_entropy, local_entropy);
- *	latent_entropy = tmp_latent_entropy;
+ *	temp_latent_entropy = rol(temp_latent_entropy, local_entropy);
+ *	latent_entropy = temp_latent_entropy;
  * }
  *
+ * It would look like this in C:
+ *
+ * unsigned long local_entropy = latent_entropy;
+ * local_entropy ^= 1234567890;
+ * local_entropy ^= (unsigned long)__builtin_frame_address(0);
+ * local_entropy += 9876543210;
+ * latent_entropy = rol(local_entropy, 1234509876);
+ *
  * TODO:
  * - add ipa pass to identify not explicitly marked candidate functions
  * - mix in more program state (function arguments/return values,
@@ -82,11 +81,12 @@ __visible int plugin_is_GPL_compatible;
 static GTY(()) tree latent_entropy_decl;
 
 static struct plugin_info latent_entropy_plugin_info = {
-	.version	= "201606141920vanilla",
+	.version	= "20161210",
 	.help		= "disable\tturn off latent entropy instrumentation\n",
 };
 
 static unsigned HOST_WIDE_INT seed;
+
 /*
  * get_random_seed() (this is a GCC function) generates the seed.
  * This is a simple random generator without any cryptographic security because
@@ -97,7 +97,7 @@ static unsigned HOST_WIDE_INT get_random_const(void)
 	unsigned int i;
 	unsigned HOST_WIDE_INT ret = 0;
 
-	for (i = 0; i < 8 * sizeof(ret); i++) {
+	for (i = 0; i < 8 * sizeof ret; i++) {
 		ret = (ret << 1) | (seed & 1);
 		seed >>= 1;
 		if (ret & 1)
@@ -119,10 +119,7 @@ static tree tree_get_random_const(tree type)
 	return build_int_cst(type, mask & get_random_const());
 }
 
-static tree handle_latent_entropy_attribute(tree *node, tree name,
-						tree args __unused,
-						int flags __unused,
-						bool *no_add_attrs)
+static tree handle_latent_entropy_attribute(tree *node, tree name, tree args __unused, int flags __unused, bool *no_add_attrs)
 {
 	tree type;
 #if BUILDING_GCC_VERSION <= 4007
@@ -134,22 +131,19 @@ static tree handle_latent_entropy_attribute(tree *node, tree name,
 	switch (TREE_CODE(*node)) {
 	default:
 		*no_add_attrs = true;
-		error("%qE attribute only applies to functions and variables",
-			name);
+		error("%qE attribute only applies to functions and variables", name);
 		break;
 
 	case VAR_DECL:
 		if (DECL_INITIAL(*node)) {
 			*no_add_attrs = true;
-			error("variable %qD with %qE attribute must not be initialized",
-				*node, name);
+			error("variable %qD with %qE attribute must not be initialized", *node, name);
 			break;
 		}
 
 		if (!TREE_STATIC(*node)) {
 			*no_add_attrs = true;
-			error("variable %qD with %qE attribute must not be local",
-				*node, name);
+			error("variable %qD with %qE attribute must not be local", *node, name);
 			break;
 		}
 
@@ -157,28 +151,29 @@ static tree handle_latent_entropy_attribute(tree *node, tree name,
 		switch (TREE_CODE(type)) {
 		default:
 			*no_add_attrs = true;
-			error("variable %qD with %qE attribute must be an integer or a fixed length integer array type or a fixed sized structure with integer fields",
-				*node, name);
+			error("variable %qD with %qE attribute must be an integer"
+				" or a fixed length integer array type"
+				" or a fixed sized structure with integer fields", *node, name);
 			break;
 
 		case RECORD_TYPE: {
-			tree fld, lst = TYPE_FIELDS(type);
+			tree field;
 			unsigned int nelt = 0;
 
-			for (fld = lst; fld; nelt++, fld = TREE_CHAIN(fld)) {
+			for (field = TYPE_FIELDS(type); field; nelt++, field = TREE_CHAIN(field)) {
 				tree fieldtype;
 
-				fieldtype = TREE_TYPE(fld);
+				fieldtype = TREE_TYPE(field);
 				if (TREE_CODE(fieldtype) == INTEGER_TYPE)
 					continue;
 
 				*no_add_attrs = true;
-				error("structure variable %qD with %qE attribute has a non-integer field %qE",
-					*node, name, fld);
+				error("structure variable %qD with %qE attribute has"
+					" a non-integer field %qE", *node, name, field);
 				break;
 			}
 
-			if (fld)
+			if (field)
 				break;
 
 #if BUILDING_GCC_VERSION <= 4007
@@ -187,15 +182,16 @@ static tree handle_latent_entropy_attribute(tree *node, tree name,
 			vec_alloc(vals, nelt);
 #endif
 
-			for (fld = lst; fld; fld = TREE_CHAIN(fld)) {
-				tree random_const, fld_t = TREE_TYPE(fld);
+			for (field = TYPE_FIELDS(type); field; field = TREE_CHAIN(field)) {
+				tree random_const;
 
-				random_const = tree_get_random_const(fld_t);
-				CONSTRUCTOR_APPEND_ELT(vals, fld, random_const);
+				random_const = tree_get_random_const(TREE_TYPE(field));
+				CONSTRUCTOR_APPEND_ELT(vals, field, random_const);
 			}
 
 			/* Initialize the fields with random constants */
 			DECL_INITIAL(*node) = build_constructor(type, vals);
+//debug_tree(DECL_INITIAL(*node));
 			break;
 		}
 
@@ -207,24 +203,19 @@ static tree handle_latent_entropy_attribute(tree *node, tree name,
 		case ARRAY_TYPE: {
 			tree elt_type, array_size, elt_size;
 			unsigned int i, nelt;
-			HOST_WIDE_INT array_size_int, elt_size_int;
 
 			elt_type = TREE_TYPE(type);
 			elt_size = TYPE_SIZE_UNIT(TREE_TYPE(type));
 			array_size = TYPE_SIZE_UNIT(type);
 
-			if (TREE_CODE(elt_type) != INTEGER_TYPE || !array_size
-				|| TREE_CODE(array_size) != INTEGER_CST) {
+			if (TREE_CODE(elt_type) != INTEGER_TYPE || !array_size || TREE_CODE(array_size) != INTEGER_CST) {
 				*no_add_attrs = true;
-				error("array variable %qD with %qE attribute must be a fixed length integer array type",
-					*node, name);
+				error("array variable %qD with %qE attribute must be"
+					" a fixed length integer array type", *node, name);
 				break;
 			}
 
-			array_size_int = TREE_INT_CST_LOW(array_size);
-			elt_size_int = TREE_INT_CST_LOW(elt_size);
-			nelt = array_size_int / elt_size_int;
-
+			nelt = TREE_INT_CST_LOW(array_size) / TREE_INT_CST_LOW(elt_size);
 #if BUILDING_GCC_VERSION <= 4007
 			vals = VEC_alloc(constructor_elt, gc, nelt);
 #else
@@ -232,17 +223,14 @@ static tree handle_latent_entropy_attribute(tree *node, tree name,
 #endif
 
 			for (i = 0; i < nelt; i++) {
-				tree cst = size_int(i);
-				tree rand_cst = tree_get_random_const(elt_type);
+				tree random_const = tree_get_random_const(elt_type);
 
-				CONSTRUCTOR_APPEND_ELT(vals, cst, rand_cst);
+				CONSTRUCTOR_APPEND_ELT(vals, size_int(i), random_const);
 			}
 
-			/*
-			 * Initialize the elements of the array with random
-			 * constants
-			 */
+			/* Initialize the elements of the array with random constants */
 			DECL_INITIAL(*node) = build_constructor(type, vals);
+//debug_tree(DECL_INITIAL(*node));
 			break;
 		}
 		}
@@ -255,28 +243,19 @@ static tree handle_latent_entropy_attribute(tree *node, tree name,
 	return NULL_TREE;
 }
 
-static struct attribute_spec latent_entropy_attr = {
-	.name				= "latent_entropy",
-	.min_length			= 0,
-	.max_length			= 0,
-	.decl_required			= true,
-	.type_required			= false,
-	.function_type_required		= false,
-	.handler			= handle_latent_entropy_attribute,
-#if BUILDING_GCC_VERSION >= 4007
-	.affects_type_identity		= false
-#endif
-};
+static struct attribute_spec latent_entropy_attr = { };
 
 static void register_attributes(void *event_data __unused, void *data __unused)
 {
+	latent_entropy_attr.name		= "latent_entropy";
+	latent_entropy_attr.decl_required	= true;
+	latent_entropy_attr.handler		= handle_latent_entropy_attribute;
+
 	register_attribute(&latent_entropy_attr);
 }
 
 static bool latent_entropy_gate(void)
 {
-	tree list;
-
 	/* don't bother with noreturn functions for now */
 	if (TREE_THIS_VOLATILE(current_function_decl))
 		return false;
@@ -285,11 +271,10 @@ static bool latent_entropy_gate(void)
 	if (EDGE_COUNT(EXIT_BLOCK_PTR_FOR_FN(cfun)->preds) == 0)
 		return false;
 
-	list = DECL_ATTRIBUTES(current_function_decl);
-	return lookup_attribute("latent_entropy", list) != NULL_TREE;
+	return lookup_attribute("latent_entropy", DECL_ATTRIBUTES(current_function_decl)) != NULL_TREE;
 }
 
-static tree create_var(tree type, const char *name)
+static tree create_a_tmp_var(tree type, const char *name)
 {
 	tree var;
 
@@ -344,12 +329,6 @@ static enum tree_code get_op(tree *rhs)
 	return op;
 }
 
-static gimple create_assign(enum tree_code code, tree lhs, tree op1,
-				tree op2)
-{
-	return gimple_build_assign_with_ops(code, lhs, op1, op2);
-}
-
 static void perturb_local_entropy(basic_block bb, tree local_entropy)
 {
 	gimple_stmt_iterator gsi;
@@ -358,21 +337,21 @@ static void perturb_local_entropy(basic_block bb, tree local_entropy)
 	enum tree_code op;
 
 	op = get_op(&rhs);
-	assign = create_assign(op, local_entropy, local_entropy, rhs);
+	assign = gimple_build_assign_with_ops(op, local_entropy, local_entropy, rhs);
 	gsi = gsi_after_labels(bb);
 	gsi_insert_before(&gsi, assign, GSI_NEW_STMT);
 	update_stmt(assign);
+//debug_bb(bb);
 }
 
-static void __perturb_latent_entropy(gimple_stmt_iterator *gsi,
-					tree local_entropy)
+static void __perturb_latent_entropy(gimple_stmt_iterator *gsi, tree local_entropy)
 {
 	gimple assign;
 	tree temp;
 	enum tree_code op;
 
 	/* 1. create temporary copy of latent_entropy */
-	temp = create_var(long_unsigned_type_node, "temp_latent_entropy");
+	temp = create_a_tmp_var(long_unsigned_type_node, "temp_latent_entropy");
 
 	/* 2. read... */
 	add_referenced_var(latent_entropy_decl);
@@ -383,7 +362,7 @@ static void __perturb_latent_entropy(gimple_stmt_iterator *gsi,
 
 	/* 3. ...modify... */
 	op = get_op(NULL);
-	assign = create_assign(op, temp, temp, local_entropy);
+	assign = gimple_build_assign_with_ops(op, temp, temp, local_entropy);
 	gsi_insert_after(gsi, assign, GSI_NEW_STMT);
 	update_stmt(assign);
 
@@ -439,20 +418,20 @@ static void perturb_latent_entropy(tree local_entropy)
 
 		__perturb_latent_entropy(&gsi, local_entropy);
 	}
+//debug_bb(single_pred(EXIT_BLOCK_PTR_FOR_FN(cfun)));
 }
 
 static void init_local_entropy(basic_block bb, tree local_entropy)
 {
 	gimple assign, call;
-	tree frame_addr, rand_const, tmp, fndecl, udi_frame_addr;
+	tree frame_addr, rand_const, temp, fndecl, udi_frame_addr;
 	enum tree_code op;
-	unsigned HOST_WIDE_INT rand_cst;
 	gimple_stmt_iterator gsi = gsi_after_labels(bb);
 
-	/* 1. create local_entropy_frameaddr */
-	frame_addr = create_var(ptr_type_node, "local_entropy_frameaddr");
+	/* 1. create local_entropy_frame_addr */
+	frame_addr = create_a_tmp_var(ptr_type_node, "local_entropy_frame_addr");
 
-	/* 2. local_entropy_frameaddr = __builtin_frame_address() */
+	/* 2. local_entropy_frame_addr = __builtin_frame_address() */
 	fndecl = builtin_decl_implicit(BUILT_IN_FRAME_ADDRESS);
 	call = gimple_build_call(fndecl, 1, integer_zero_node);
 	gimple_call_set_lhs(call, frame_addr);
@@ -465,26 +444,26 @@ static void init_local_entropy(basic_block bb, tree local_entropy)
 	update_stmt(assign);
 
 	/* 3. create temporary copy of latent_entropy */
-	tmp = create_var(long_unsigned_type_node, "temp_latent_entropy");
+	temp = create_a_tmp_var(long_unsigned_type_node, "temp_latent_entropy");
 
 	/* 4. read the global entropy variable into local entropy */
 	add_referenced_var(latent_entropy_decl);
 	mark_sym_for_renaming(latent_entropy_decl);
-	assign = gimple_build_assign(tmp, latent_entropy_decl);
+	assign = gimple_build_assign(temp, latent_entropy_decl);
 	gsi_insert_after(&gsi, assign, GSI_NEW_STMT);
 	update_stmt(assign);
 
-	/* 5. mix local_entropy_frameaddr into local entropy */
-	assign = create_assign(BIT_XOR_EXPR, local_entropy, local_entropy, tmp);
+	/* 5. mix local_entropy_frame_addr into local entropy */
+	assign = gimple_build_assign_with_ops(BIT_XOR_EXPR, local_entropy, local_entropy, temp);
 	gsi_insert_after(&gsi, assign, GSI_NEW_STMT);
 	update_stmt(assign);
 
-	rand_cst = get_random_const();
-	rand_const = build_int_cstu(long_unsigned_type_node, rand_cst);
+	rand_const = build_int_cstu(long_unsigned_type_node, get_random_const());
 	op = get_op(NULL);
-	assign = create_assign(op, local_entropy, local_entropy, rand_const);
+	assign = gimple_build_assign_with_ops(op, local_entropy, local_entropy, rand_const);
 	gsi_insert_after(&gsi, assign, GSI_NEW_STMT);
 	update_stmt(assign);
+//debug_bb(bb);
 }
 
 static bool create_latent_entropy_decl(void)
@@ -495,16 +474,15 @@ static bool create_latent_entropy_decl(void)
 		return true;
 
 	FOR_EACH_VARIABLE(node) {
-		tree name, var = NODE_DECL(node);
+		tree var = NODE_DECL(node);
 
 		if (DECL_NAME_LENGTH(var) < sizeof("latent_entropy") - 1)
 			continue;
-
-		name = DECL_NAME(var);
-		if (strcmp(IDENTIFIER_POINTER(name), "latent_entropy"))
+		if (strcmp(IDENTIFIER_POINTER(DECL_NAME(var)), "latent_entropy"))
 			continue;
 
 		latent_entropy_decl = var;
+//		debug_tree(var);
 		break;
 	}
 
@@ -516,32 +494,35 @@ static unsigned int latent_entropy_execute(void)
 	basic_block bb;
 	tree local_entropy;
 
-	if (!create_latent_entropy_decl())
+	if (!create_latent_entropy_decl()) {
+//		debug_tree(current_function_decl);
 		return 0;
+	}
 
-	/* prepare for step 2 below */
+//fprintf(stderr, "latent_entropy: %s\n", IDENTIFIER_POINTER(DECL_NAME(current_function_decl)));
+
+	/* 2. initialize local entropy variable */
 	gcc_assert(single_succ_p(ENTRY_BLOCK_PTR_FOR_FN(cfun)));
 	bb = single_succ(ENTRY_BLOCK_PTR_FOR_FN(cfun));
 	if (!single_pred_p(bb)) {
+//		gcc_assert(bb_loop_depth(bb) || (bb->flags & BB_IRREDUCIBLE_LOOP));
 		split_edge(single_succ_edge(ENTRY_BLOCK_PTR_FOR_FN(cfun)));
 		gcc_assert(single_succ_p(ENTRY_BLOCK_PTR_FOR_FN(cfun)));
 		bb = single_succ(ENTRY_BLOCK_PTR_FOR_FN(cfun));
 	}
 
 	/* 1. create the local entropy variable */
-	local_entropy = create_var(long_unsigned_type_node, "local_entropy");
+	local_entropy = create_a_tmp_var(long_unsigned_type_node, "local_entropy");
 
 	/* 2. initialize the local entropy variable */
 	init_local_entropy(bb, local_entropy);
 
 	bb = bb->next_bb;
 
-	/*
-	 * 3. instrument each BB with an operation on the
-	 *    local entropy variable
-	 */
+	/* 3. instrument each BB with an operation on the local entropy variable */
 	while (bb != EXIT_BLOCK_PTR_FOR_FN(cfun)) {
 		perturb_local_entropy(bb, local_entropy);
+//debug_bb(bb);
 		bb = bb->next_bb;
 	};
 
@@ -550,11 +531,9 @@ static unsigned int latent_entropy_execute(void)
 	return 0;
 }
 
-static void latent_entropy_start_unit(void *gcc_data __unused,
-					void *user_data __unused)
+static void latent_entropy_start_unit(void *gcc_data __unused, void *user_data __unused)
 {
-	tree type, id;
-	int quals;
+	tree latent_entropy_type;
 
 	seed = get_random_seed(false);
 
@@ -562,10 +541,8 @@ static void latent_entropy_start_unit(void *gcc_data __unused,
 		return;
 
 	/* extern volatile unsigned long latent_entropy */
-	quals = TYPE_QUALS(long_unsigned_type_node) | TYPE_QUAL_VOLATILE;
-	type = build_qualified_type(long_unsigned_type_node, quals);
-	id = get_identifier("latent_entropy");
-	latent_entropy_decl = build_decl(UNKNOWN_LOCATION, VAR_DECL, id, type);
+	latent_entropy_type = build_qualified_type(long_unsigned_type_node, TYPE_QUALS(long_unsigned_type_node) | TYPE_QUAL_VOLATILE);
+	latent_entropy_decl = build_decl(UNKNOWN_LOCATION, VAR_DECL, get_identifier("latent_entropy"), latent_entropy_type);
 
 	TREE_STATIC(latent_entropy_decl) = 1;
 	TREE_PUBLIC(latent_entropy_decl) = 1;
@@ -575,16 +552,18 @@ static void latent_entropy_start_unit(void *gcc_data __unused,
 	DECL_EXTERNAL(latent_entropy_decl) = 1;
 	DECL_ARTIFICIAL(latent_entropy_decl) = 1;
 	lang_hooks.decls.pushdecl(latent_entropy_decl);
+//	DECL_ASSEMBLER_NAME(latent_entropy_decl);
+//	varpool_finalize_decl(latent_entropy_decl);
+//	varpool_mark_needed_node(latent_entropy_decl);
 }
 
 #define PASS_NAME latent_entropy
 #define PROPERTIES_REQUIRED PROP_gimple_leh | PROP_cfg
-#define TODO_FLAGS_FINISH TODO_verify_ssa | TODO_verify_stmts | TODO_dump_func \
-	| TODO_update_ssa
+//#define TODO_FLAGS_START TODO_verify_ssa | TODO_verify_flow | TODO_verify_stmts
+#define TODO_FLAGS_FINISH TODO_verify_ssa | TODO_verify_stmts | TODO_dump_func | TODO_update_ssa
 #include "gcc-generate-gimple-pass.h"
 
-__visible int plugin_init(struct plugin_name_args *plugin_info,
-			  struct plugin_gcc_version *version)
+__visible int plugin_init(struct plugin_name_args *plugin_info, struct plugin_gcc_version *version)
 {
 	bool enabled = true;
 	const char * const plugin_name = plugin_info->base_name;
@@ -592,12 +571,6 @@ __visible int plugin_init(struct plugin_name_args *plugin_info,
 	const struct plugin_argument * const argv = plugin_info->argv;
 	int i;
 
-	struct register_pass_info latent_entropy_pass_info;
-
-	latent_entropy_pass_info.pass		= make_latent_entropy_pass();
-	latent_entropy_pass_info.reference_pass_name		= "optimized";
-	latent_entropy_pass_info.ref_pass_instance_number	= 1;
-	latent_entropy_pass_info.pos_op		= PASS_POS_INSERT_BEFORE;
 	static const struct ggc_root_tab gt_ggc_r_gt_latent_entropy[] = {
 		{
 			.base = &latent_entropy_decl,
@@ -609,8 +582,10 @@ __visible int plugin_init(struct plugin_name_args *plugin_info,
 		LAST_GGC_ROOT_TAB
 	};
 
+	PASS_INFO(latent_entropy, "optimized", 1, PASS_POS_INSERT_BEFORE);
+
 	if (!plugin_default_version_check(version, &gcc_version)) {
-		error(G_("incompatible gcc/plugin versions"));
+		error_gcc_version(version);
 		return 1;
 	}
 
@@ -619,21 +594,16 @@ __visible int plugin_init(struct plugin_name_args *plugin_info,
 			enabled = false;
 			continue;
 		}
-		error(G_("unkown option '-fplugin-arg-%s-%s'"), plugin_name, argv[i].key);
+		error(G_("unknown option '-fplugin-arg-%s-%s'"), plugin_name, argv[i].key);
 	}
 
-	register_callback(plugin_name, PLUGIN_INFO, NULL,
-				&latent_entropy_plugin_info);
+	register_callback(plugin_name, PLUGIN_INFO, NULL, &latent_entropy_plugin_info);
 	if (enabled) {
-		register_callback(plugin_name, PLUGIN_START_UNIT,
-					&latent_entropy_start_unit, NULL);
-		register_callback(plugin_name, PLUGIN_REGISTER_GGC_ROOTS,
-				  NULL, (void *)&gt_ggc_r_gt_latent_entropy);
-		register_callback(plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL,
-					&latent_entropy_pass_info);
+		register_callback(plugin_name, PLUGIN_START_UNIT, &latent_entropy_start_unit, NULL);
+		register_callback(plugin_name, PLUGIN_REGISTER_GGC_ROOTS, NULL, (void *)&gt_ggc_r_gt_latent_entropy);
+		register_callback(plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &latent_entropy_pass_info);
 	}
-	register_callback(plugin_name, PLUGIN_ATTRIBUTES, register_attributes,
-				NULL);
+	register_callback(plugin_name, PLUGIN_ATTRIBUTES, register_attributes, NULL);
 
 	return 0;
 }
