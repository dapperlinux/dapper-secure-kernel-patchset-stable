diff --git a/kernel/panic.c b/kernel/panic.c
index e6480e2..fb9cd2a 100644
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@ -56,7 +56,7 @@ EXPORT_SYMBOL(panic_blink);
 /*
  * Stop ourself in panic -- architecture code may override this
  */
-void __weak panic_smp_self_stop(void)
+void __weak __noreturn panic_smp_self_stop(void)
 {
 	while (1)
 		cpu_relax();
@@ -521,11 +521,11 @@ void __warn(const char *file, int line, void *caller, unsigned taint,
 	pr_warn("------------[ cut here ]------------\n");
 
 	if (file)
-		pr_warn("WARNING: CPU: %d PID: %d at %s:%d %pS\n",
+		pr_warn("WARNING: CPU: %d PID: %d at %s:%d %pA\n",
 			raw_smp_processor_id(), current->pid, file, line,
 			caller);
 	else
-		pr_warn("WARNING: CPU: %d PID: %d at %pS\n",
+		pr_warn("WARNING: CPU: %d PID: %d at %pA\n",
 			raw_smp_processor_id(), current->pid, caller);
 
 	if (args)
@@ -556,7 +556,7 @@ void __warn(const char *file, int line, void *caller, unsigned taint,
 }
 
 #ifdef WANT_WARN_ON_SLOWPATH
-void warn_slowpath_fmt(const char *file, int line, const char *fmt, ...)
+void warn_slowpath_fmt(const char *file, const int line, const char *fmt, ...)
 {
 	struct warn_args args;
 
@@ -568,7 +568,7 @@ void warn_slowpath_fmt(const char *file, int line, const char *fmt, ...)
 }
 EXPORT_SYMBOL(warn_slowpath_fmt);
 
-void warn_slowpath_fmt_taint(const char *file, int line,
+void warn_slowpath_fmt_taint(const char *file, const int line,
 			     unsigned taint, const char *fmt, ...)
 {
 	struct warn_args args;
@@ -580,7 +580,7 @@ void warn_slowpath_fmt_taint(const char *file, int line,
 }
 EXPORT_SYMBOL(warn_slowpath_fmt_taint);
 
-void warn_slowpath_null(const char *file, int line)
+void warn_slowpath_null(const char *file, const int line)
 {
 	__warn(file, line, __builtin_return_address(0), TAINT_WARN, NULL, NULL);
 }
@@ -595,7 +595,8 @@ EXPORT_SYMBOL(warn_slowpath_null);
  */
 __visible void __stack_chk_fail(void)
 {
-	panic("stack-protector: Kernel stack is corrupted in: %p\n",
+	dump_stack();
+	panic("stack-protector: Kernel stack is corrupted in: %pA\n",
 		__builtin_return_address(0));
 }
 EXPORT_SYMBOL(__stack_chk_fail);
