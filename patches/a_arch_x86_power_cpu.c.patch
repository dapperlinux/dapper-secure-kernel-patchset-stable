diff --git a/arch/x86/power/cpu.c b/arch/x86/power/cpu.c
index 53cace2..ef55cca 100644
--- a/arch/x86/power/cpu.c
+++ b/arch/x86/power/cpu.c
@@ -160,11 +160,8 @@ static void do_fpu_end(void)
 static void fix_processor_context(void)
 {
 	int cpu = smp_processor_id();
-	struct tss_struct *t = &per_cpu(cpu_tss, cpu);
-#ifdef CONFIG_X86_64
-	struct desc_struct *desc = get_cpu_gdt_table(cpu);
-	tss_desc tss;
-#endif
+	struct tss_struct *t = cpu_tss + cpu;
+
 	set_tss_desc(cpu, t);	/*
 				 * This just modifies memory; should not be
 				 * necessary. But... This is necessary, because
@@ -173,10 +170,6 @@ static void fix_processor_context(void)
 				 */
 
 #ifdef CONFIG_X86_64
-	memcpy(&tss, &desc[GDT_ENTRY_TSS], sizeof(tss_desc));
-	tss.type = 0x9; /* The available 64-bit TSS (see AMD vol 2, pg 91 */
-	write_gdt_entry(desc, GDT_ENTRY_TSS, &tss, DESC_TSS);
-
 	syscall_init();				/* This sets MSR_*STAR and related */
 #endif
 	load_TR_desc();				/* This does ltr */
@@ -289,9 +282,13 @@ int hibernate_resume_nonboot_cpu_disable(void)
 	 * any more at that point (the page tables used by it previously may
 	 * have been overwritten by hibernate image data).
 	 */
+	pax_open_kernel();
 	smp_ops.play_dead = resume_play_dead;
+	pax_close_kernel();
 	ret = disable_nonboot_cpus();
+	pax_open_kernel();
 	smp_ops.play_dead = play_dead;
+	pax_close_kernel();
 	return ret;
 }
 #endif
