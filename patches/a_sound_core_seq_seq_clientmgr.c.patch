diff --git a/sound/core/seq/seq_clientmgr.c b/sound/core/seq/seq_clientmgr.c
index f3b1d7f..6645b81 100644
--- a/sound/core/seq/seq_clientmgr.c
+++ b/sound/core/seq/seq_clientmgr.c
@@ -403,7 +403,7 @@ static ssize_t snd_seq_read(struct file *file, char __user *buf, size_t count,
 	if (!client->accept_input || (fifo = client->data.user.fifo) == NULL)
 		return -ENXIO;
 
-	if (atomic_read(&fifo->overflow) > 0) {
+	if (atomic_read_unchecked(&fifo->overflow) > 0) {
 		/* buffer overflow is detected */
 		snd_seq_fifo_clear(fifo);
 		/* return error code */
@@ -433,7 +433,7 @@ static ssize_t snd_seq_read(struct file *file, char __user *buf, size_t count,
 			count -= sizeof(struct snd_seq_event);
 			buf += sizeof(struct snd_seq_event);
 			err = snd_seq_expand_var_event(&cell->event, count,
-						       (char __force *)buf, 0,
+						       (char __force_kernel *)buf, 0,
 						       sizeof(struct snd_seq_event));
 			if (err < 0)
 				break;
@@ -1049,13 +1049,13 @@ static ssize_t snd_seq_write(struct file *file, const char __user *buf,
 			}
 			/* set user space pointer */
 			event.data.ext.len = extlen | SNDRV_SEQ_EXT_USRPTR;
-			event.data.ext.ptr = (char __force *)buf
+			event.data.ext.ptr = (char __force_kernel *)buf
 						+ sizeof(struct snd_seq_event);
 			len += extlen; /* increment data length */
 		} else {
 #ifdef CONFIG_COMPAT
 			if (client->convert32 && snd_seq_ev_is_varusr(&event)) {
-				void *ptr = (void __force *)compat_ptr(event.data.raw32.d[1]);
+				void *ptr = (void __force_kernel *)compat_ptr(event.data.raw32.d[1]);
 				event.data.ext.ptr = ptr;
 			}
 #endif
